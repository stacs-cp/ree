#!/usr/bin/env python3
# read spec
#  parse arguments
#  locate relevant files
#  concatenate spec and parameter files
#  get AST via Conjure
# benchmark performance
#  time running conjure solve
# apply rewriting
#  call rewriting system with specified rewrite
#  check rewrite actually made a change
# if rewrite happened, benchmark performance of new spec
#  concatenate spec and parameter files
# report comparison

import sys
import argparse
p = argparse.ArgumentParser()
p.add_argument('-s', '--spec', action='store')
p.add_argument('-p', '--param', action='store')
p.add_argument('-r', '--rewrite', action='store')
args = p.parse_args(args=sys.argv[1:])
# args.spec is the input spec filename
# args.param is the input param filename
# args.rewrite is the kind of rewrite to perform
print(args.spec, args.param, args.rewrite)

import pathlib
from pathlib import Path
if args.spec:
    specfile = Path(args.spec)
else:
    sys.exit('A spec file must be provided, quitting')
if specfile.is_file():
    print('found spec file', specfile)
else:
    sys.exit('A spec file must be provided, quitting')
doParam = False
if args.param:
    paramfile = Path(args.param)
    doParam = paramfile.is_file()
if doParam:
    print('found param file', paramfile)
    filenames = [paramfile, specfile]
else:
    filenames = [specfile]

# generate temp file name
tmpfile = './temp-042.essence'
with open(tmpfile, 'w') as outfile:
    for fname in filenames:
        with open(fname, 'r') as infile:
            outfile.write(infile.read())

# ask conjure to generate AST
# from spec.bla make spec.bla.astjson
astfilename = '{0}.astjson'.format(specfile)
import subprocess
with open(astfilename, 'w') as astfile:
    if subprocess.run(['conjure',
                       'pretty', '--output-format=astjson', tmpfile],
                      shell=False, stdout=astfile).returncode != 0:
        sys.exit('Something went wrong with calling conjure, quitting')

import json
with open(astfilename, 'r') as astfile:
    A = json.load(astfile)

