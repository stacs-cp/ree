$ graph multicolouring for directed graphs
$ uses exactly coloursPerNode colours for each vertex
given n : int
letting vertices be domain int(1..n)
given edges : relation (irreflexive) of ( vertices * vertices )
given numberColours : int(1..)
given coloursPerNode : int(1..)
letting colours be domain int(1..numberColours)
find c : relation (size n*coloursPerNode) of ( vertices * colours )
such that true

$ endpoints of edges do not share colours
,  forAll (u,v) in edges .
      (forAll colourAssignment in c .
         (colourAssignment[1] = u) -> !((v,colourAssignment[2]) in c))

$ enforce number of colours per node, another version
,  forAll u in vertices .
      coloursPerNode = (sum colourAssignment in c .
         toInt(colourAssignment[1] = u))


$ misc attempts and other discussion follows

$ endpoints of edges do not share colours
$ this one fails due to u's being different entities
$,  forAll (u,v) in edges .
$      (forAll (u,col) in c .
$         !((v,col) in c))
$ this one blows up the parser, probably
$,  forAll (u,v) in edges .
$      (forAll colourAssignment in c . and([
$         (colourAssignment[1] = u) -> !((v,col) in c))
$         | letting col be colourAssignment[2]
$       ])
         
$ enforce number of colours per node
$,  forAll u in vertices .
$      |toSet([col : colours | (u,col) in c])| = coloursPerNode

$ logical spec
$ y in imageSet(R,x) <-> R(x,y)

$ think this is invalid Essence:
$ { y | R(x,y) }

$ given R : relation of (domainOfR * coDomainOfR)
$ imageSet(R,x) = toSet([y : coDomainOfR | R(x,y)])

$          forAll i : colours . (i = j)
$          and i : colours . (i = j)
$          and([ i : colours | (i = j) ])

$          exists i : colours . (i = j)
$          or i : colours . (i = j)
$          or([ i : colours | (i = j) ])
  
$          sum i : colours . (i = j)
$          sum([ i : colours | (i = j) ])     

$ forAll v in vertices .
$     forAll colourAssignment in c(v,_) .
