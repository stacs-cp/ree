$ turning function into sequence

given n : int(1..)
letting Index be domain int(1..n)
letting Value be domain ...
letting fType be domain function Index --> Value
find f : fType

$ find fSeq : sequence (size n) of Value
$ such that forAll i : Index . (fSeq(i) = f(i))

$ rewrite:
$ (delete Index)
$ letting fSeq be domain sequence (size n) of Value

$ we can replace fType by fSeq everywhere
$ as long as it is not part of a function-specific operation

$ if transforming a type that is not a decision variable, there is no need to transform the solution back
$ the inverse transformation is only needed if the tranformation is applied to a decision variable

$ NOTE: when an auxiliary variable is introduced in rewriting the spec,
$ we need to invert the transformation by removing it in the solution
$ since otherwise it will not match the original spec

$ vice versa, if we delete a variable in rewriting then we need to add it back

$ inverse rewrite:
$ letting Index be domain int(1..n)
$ find f : fType such that
$ forAll i : Index . (fSeq(i) = f(i))

$ if a solution of the new spec is found, the solution should be used as a parameter
$ of the following spec, which turns the solution back to its original type.

given n : int(1..) $$ THIS must be taken from original spec file. The letting associated to this must be taken from the parameter file and glued into the solution file
$alternatively to adding a given one can just place the letting n ... of the original parameter here.
letting Index be domain int(1..n) 
letting Value be domain ...
letting fType be domain function Index --> Value
given fSeq : sequence of Value
find f : fType
such that
forAll i : Index . (fSeq(i) = f(i))