letting AUXFUNC be domain function (total) int(0..2) --> int(0..3)

letting f00 be function( 0 --> 0, 1 --> 0, 2 --> 0 )
letting f01 be function( 0 --> 0, 1 --> 0, 2 --> 1 )
letting f02 be function( 0 --> 0, 1 --> 0, 2 --> 2 )
letting f03 be function( 0 --> 0, 1 --> 0, 2 --> 3 )
letting f04 be function( 0 --> 0, 1 --> 1, 2 --> 0 )
letting f05 be function( 0 --> 0, 1 --> 1, 2 --> 1 )
letting f06 be function( 0 --> 0, 1 --> 1, 2 --> 2 )
letting f07 be function( 0 --> 0, 1 --> 1, 2 --> 3 )
letting f08 be function( 0 --> 0, 1 --> 2, 2 --> 0 )
letting f09 be function( 0 --> 0, 1 --> 2, 2 --> 1 )
letting f10 be function( 0 --> 0, 1 --> 2, 2 --> 2 )
letting f11 be function( 0 --> 0, 1 --> 2, 2 --> 3 )
letting f12 be function( 0 --> 0, 1 --> 3, 2 --> 0 )
letting f13 be function( 0 --> 0, 1 --> 3, 2 --> 1 )
letting f14 be function( 0 --> 0, 1 --> 3, 2 --> 2 )
letting f15 be function( 0 --> 0, 1 --> 3, 2 --> 3 )
letting f16 be function( 0 --> 1, 1 --> 0, 2 --> 0 )
letting f17 be function( 0 --> 1, 1 --> 0, 2 --> 1 )
letting f18 be function( 0 --> 1, 1 --> 0, 2 --> 2 )
letting f19 be function( 0 --> 1, 1 --> 0, 2 --> 3 )
letting f20 be function( 0 --> 1, 1 --> 1, 2 --> 0 )
letting f21 be function( 0 --> 1, 1 --> 1, 2 --> 1 )
letting f22 be function( 0 --> 1, 1 --> 1, 2 --> 2 )
letting f23 be function( 0 --> 1, 1 --> 1, 2 --> 3 )
letting f24 be function( 0 --> 1, 1 --> 2, 2 --> 0 )
letting f25 be function( 0 --> 1, 1 --> 2, 2 --> 1 )
letting f26 be function( 0 --> 1, 1 --> 2, 2 --> 2 )
letting f27 be function( 0 --> 1, 1 --> 2, 2 --> 3 )
letting f28 be function( 0 --> 1, 1 --> 3, 2 --> 0 )
letting f29 be function( 0 --> 1, 1 --> 3, 2 --> 1 )
letting f30 be function( 0 --> 1, 1 --> 3, 2 --> 2 )
letting f31 be function( 0 --> 1, 1 --> 3, 2 --> 3 )
letting f32 be function( 0 --> 2, 1 --> 0, 2 --> 0 )
letting f33 be function( 0 --> 2, 1 --> 0, 2 --> 1 )
letting f34 be function( 0 --> 2, 1 --> 0, 2 --> 2 )
letting f35 be function( 0 --> 2, 1 --> 0, 2 --> 3 )
letting f36 be function( 0 --> 2, 1 --> 1, 2 --> 0 )
letting f37 be function( 0 --> 2, 1 --> 1, 2 --> 1 )
letting f38 be function( 0 --> 2, 1 --> 1, 2 --> 2 )
letting f39 be function( 0 --> 2, 1 --> 1, 2 --> 3 )
letting f40 be function( 0 --> 2, 1 --> 2, 2 --> 0 )
letting f41 be function( 0 --> 2, 1 --> 2, 2 --> 1 )
letting f42 be function( 0 --> 2, 1 --> 2, 2 --> 2 )
letting f43 be function( 0 --> 2, 1 --> 2, 2 --> 3 )
letting f44 be function( 0 --> 2, 1 --> 3, 2 --> 0 )
letting f45 be function( 0 --> 2, 1 --> 3, 2 --> 1 )
letting f46 be function( 0 --> 2, 1 --> 3, 2 --> 2 )
letting f47 be function( 0 --> 2, 1 --> 3, 2 --> 3 )
letting f48 be function( 0 --> 3, 1 --> 0, 2 --> 0 )
letting f49 be function( 0 --> 3, 1 --> 0, 2 --> 1 )
letting f50 be function( 0 --> 3, 1 --> 0, 2 --> 2 )
letting f51 be function( 0 --> 3, 1 --> 0, 2 --> 3 )
letting f52 be function( 0 --> 3, 1 --> 1, 2 --> 0 )
letting f53 be function( 0 --> 3, 1 --> 1, 2 --> 1 )
letting f54 be function( 0 --> 3, 1 --> 1, 2 --> 2 )
letting f55 be function( 0 --> 3, 1 --> 1, 2 --> 3 )
letting f56 be function( 0 --> 3, 1 --> 2, 2 --> 0 )
letting f57 be function( 0 --> 3, 1 --> 2, 2 --> 1 )
letting f58 be function( 0 --> 3, 1 --> 2, 2 --> 2 )
letting f59 be function( 0 --> 3, 1 --> 2, 2 --> 3 )
letting f60 be function( 0 --> 3, 1 --> 3, 2 --> 0 )
letting f61 be function( 0 --> 3, 1 --> 3, 2 --> 1 )
letting f62 be function( 0 --> 3, 1 --> 3, 2 --> 2 )
letting f63 be function( 0 --> 3, 1 --> 3, 2 --> 3 )

$ we want to map i : int(0..63) to f<i>
$letting enumFunctions be new type enum {
$f00,f01,f02,f03,f04,f05,f06,f07,f08,f09,f10,f11,f12,f13,f14,f15,f16,f17,f18,f19,f20,f21,f22,f23,f24,f25,f26,f27,f28,f29,f30,f31,f32,f33,f34,f35,f36,f37,f38,f39,f40,f41,f42,f43,f44,f45,f46,f47,f48,f49,f50,f51,f52,f53,f54,f55,f56,f57,f58,f59,f60,f61,f62,f63
$}

letting setFunctions be {
f00,f01,f02,f03,f04,f05,f06,f07,f08,f09,f10,f11,f12,f13,f14,f15,f16,f17,f18,f19,f20,f21,f22,f23,f24,f25,f26,f27,f28,f29,f30,f31,f32,f33,f34,f35,f36,f37,f38,f39,f40,f41,f42,f43,f44,f45,f46,f47,f48,f49,f50,f51,f52,f53,f54,f55,f56,f57,f58,f59,f60,f61,f62,f63
}

$ matrix:
$find fMatrix : matrix indexed by [int(0..63)] of int(0..1)

$find fMatrix : matrix indexed by [enumFunctions] of int(0..1)

$ set:
$find fSet : set of AUXFUNC

$ original:
$ find f : function AUXFUNC --> int(0..1)

find x : AUXFUNC
such that x in setFunctions

find y : int(0..1)
$ the answer is: x --> y

