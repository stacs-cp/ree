language Essence 1.3

given n_min: int(0..100)
given n_max: int(0..100)
find repaired_n_min: int(0..100)
find repaired_n_max: int(0..100)
such that repaired_n_min <= repaired_n_max
given edges_cardMin: int(0..100)
given edges_cardMax: int(0..100)
given edges_relation1_min: int(0..99)
given edges_relation1_max: int(0..99)
given edges_relation2_min: int(0..99)
given edges_relation2_max: int(0..99)
find repaired_edges_cardMin: int(0..100)
find repaired_edges_cardMax: int(0..100)
find repaired_edges_relation1_min: int(0..99)
find repaired_edges_relation1_max: int(0..99)
find repaired_edges_relation2_min: int(0..99)
find repaired_edges_relation2_max: int(0..99)
such that
    repaired_edges_relation1_min <= repaired_edges_relation1_max,
    repaired_edges_relation2_min <= repaired_edges_relation2_max
given numberColours_min: int(1..100)
given numberColours_max: int(1..100)
find repaired_numberColours_min: int(1..100)
find repaired_numberColours_max: int(1..100)
such that repaired_numberColours_min <= repaired_numberColours_max
given coloursPerNode_min: int(1..100)
given coloursPerNode_max: int(1..100)
find repaired_coloursPerNode_min: int(1..100)
find repaired_coloursPerNode_max: int(1..100)
such that repaired_coloursPerNode_min <= repaired_coloursPerNode_max
minimising
    sum([|repaired_n_min - n_min|, |repaired_n_max - n_max|, |repaired_edges_cardMin - edges_cardMin|,
         |repaired_edges_cardMax - edges_cardMax|, |repaired_edges_relation1_min - edges_relation1_min|,
         |repaired_edges_relation1_max - edges_relation1_max|, |repaired_edges_relation2_min - edges_relation2_min|,
         |repaired_edges_relation2_max - edges_relation2_max|, |repaired_numberColours_min - numberColours_min|,
         |repaired_numberColours_max - numberColours_max|, |repaired_coloursPerNode_min - coloursPerNode_min|,
         |repaired_coloursPerNode_max - coloursPerNode_max|;
             int(1..12)])
