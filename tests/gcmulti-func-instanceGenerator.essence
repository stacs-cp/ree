language Essence 1.3

given n_min: int(0..100)
given n_max: int(0..100)
find n: int(0..100)
such that
    n >= n_min,
    n <= n_max
given edges_cardMin: int(0..100)
given edges_cardMax: int(0..100)
given edges_relation1_min: int(0..99)
given edges_relation1_max: int(0..99)
given edges_relation2_min: int(0..99)
given edges_relation2_max: int(0..99)
find edges: relation (maxSize 100, irreflexive) of (int(0..99) * int(0..99))
such that
    |edges| >= edges_cardMin /\ |edges| <= edges_cardMax,
    and([q1[1] >= edges_relation1_min | q1 <- edges]),
    and([q1[1] <= edges_relation1_max | q1 <- edges]),
    and([q1[1] <= n - 1 | q1 <- edges]),
    and([q1[2] >= edges_relation2_min | q1 <- edges]),
    and([q1[2] <= edges_relation2_max | q1 <- edges]),
    and([q1[2] <= n - 1 | q1 <- edges])
given numberColours_min: int(1..100)
given numberColours_max: int(1..100)
find numberColours: int(1..100)
such that
    numberColours >= numberColours_min,
    numberColours <= numberColours_max,
    numberColours <= n
given coloursPerNode_min: int(1..100)
given coloursPerNode_max: int(1..100)
find coloursPerNode: int(1..100)
such that
    coloursPerNode >= coloursPerNode_min,
    coloursPerNode <= coloursPerNode_max,
    coloursPerNode <= n
