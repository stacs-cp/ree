Statement := DeclarationStatement
            | SuchThatStatement

DeclarationStatement := LettingStatement   
                      | FindingStatement

LettingStatement := NameLettingStatement
                  | DomainNameLettingStatement

NameLettingStatement := "letting" Name "be" Expression 

DomainNameLettingStatement := "letting" NameDomain "be domain" Domain

FindStatement := "find" Name ":" Domain

SuchThatStatement := "such that" BooleanExpression

BooleanExpression := bool
                | BooleanExpression BooleanBinaryOperator BooleanExpression
                | IntegerExpression integerBooleanBinaryOperator IntegerExpression
                | BoolanUnitaryOperator BooleanExpression
                | Quantification
                | "(" BooleanExpression ")"
                | LocalName in ??set??
                | typedNamedConstant


IntegerExpression := integer
                | integerExpression integerBinaryOperator integerExpression
                | IntegerUnitaryOperator IntegerExpression
						

Literal := integerConstant 
         | relationConstant
         | tupleConstant
         | bool
         | typedNamedConstant

Domain := "int" list(Range, ",", "()") 
        | "tuple" list(Domain, ",", "()")
        | "relation" "of" list(Domain, "*", "()")
        | "relation" (size integerExpression)"of" list(Domain, "*", "()")
        | NameDomain 

Range := integerExpression ".." integerExpression
          
BooleanBinaryOperator := "->"
                | "/\"
                | "\/"
                | "="
                | "!="

BoolanUnitaryOperator := "!"

IntegerUnitaryOperator := "-"

integerBooleanBinaryOperator := "<"
                | ">"
                | "<="
                | ">="
                | "="
		| "!="

Quantification := quantifier name preposition+finiteCollection

quantifier := forAll
	| exists

preposition+finiteCollection := "in" Set
			| ":" Domain