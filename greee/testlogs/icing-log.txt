+++++++++++++++++++++++++++++++++++++ 
2023-05-13 23:50:32.560981
 
+++++++++++++++++++++++++++++++++++++ 
egraph3col.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..10)
letting G be relation((1,2),(1,3),(2,3),(4,5),(5,6),(6,7),(7,8),(7,9),(8,9),(9,10),(3,4),(6,1),(2,6),(6,3),(10,8),(1,8))
find C : relation of (vertices)
such that
  forAll (u,v) in G .
     C(u) != C(v)

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..10)
letting G be relation((1,2)(1,3)(2,3)(4,5)(5,6)(6,7)(7,8)(7,9)(8,9)(9,10)(3,4)(6,1)(2,6)(6,3)(10,8)(1,8))
find C : relation of (vertices)
such that 
  forAll (u,v) in G . 
  C[u]  != C[v] 


+++++++++++++++++++++++++++++++++++++ 
egraph3col2.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..10)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3),(4,5),(5,6),(6,7),(7,8),(7,9),(8,9),(9,10),(3,4),(6,1),(2,6),(6,3),(10,8),(1,8))
find C : relation of (colours)
such that
  forAll (u,v) in G .
     C(u) != C(v)

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..10)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3)(4,5)(5,6)(6,7)(7,8)(7,9)(8,9)(9,10)(3,4)(6,1)(2,6)(6,3)(10,8)(1,8))
find C : relation of (colours)
such that 
  forAll (u,v) in G . 
  C[u]  != C[v] 


+++++++++++++++++++++++++++++++++++++ 
egraph3col3.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
find C : relation of (vertices * colours) $ a function, really
such that
  $ function
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
  $ total
, forAll u : vertices .
     exists c : colours . C(u,c)
  $ proper colouring
, forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
find C : relation of (vertices*colours)
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
  ,
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
  ,
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d


+++++++++++++++++++++++++++++++++++++ 
egraph3col4.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
find C : relation of (vertices * colours)
such that
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
such that
  forAll u : vertices .
     exists c : colours . C(u,c)
such that
  forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
find C : relation of (vertices*colours)
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
such that 
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
such that 
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d


+++++++++++++++++++++++++++++++++++++ 
emini-example1.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
letting map be domain relation of (vertices * colours)
find C : map
such that
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
such that
  forAll u : vertices .
     exists c : colours . C(u,c)
such that
  forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
letting map be domain relation of (vertices*colours)
find C : map
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
such that 
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
such that 
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d


+++++++++++++++++++++++++++++++++++++ 
emini-example2.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
letting map be domain relation of (vertices * colours)
letting T be domain tuple (vertices,colours)
find C : map
find t : T
such that
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
such that
  forAll u : vertices .
     exists c : colours . C(u,c)
such that
  forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))
such that
  t in C
such that
  t[1] = t[2]


* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
letting map be domain relation of (vertices*colours)
letting T be domain tuple(vertices,colours)
find C : map
find t : T
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
such that 
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
such that 
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d
such that 
  t in C
such that 
  t[1]  = t[2] 


+++++++++++++++++++++++++++++++++++++ 
etest.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting R be relation((1,2),(1,3))
find i : D
such that
  exists j : D . (i,j) in R
, forAll k : D . forAll j : D . ((k,j) in R -> (i,j) in R)

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting R be relation((1,2)(1,3))
find i : D
such that 
  exists j : D . 
  (i,j) in R
  ,
  forAll k : D . 
  forAll j : D . 
  (k,j) in R -> (i,j) in R


+++++++++++++++++++++++++++++++++++++ 
etest2.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting R be relation((1,2),(1,3))
find S : Rtype
such that
  forAll (x,y) in S .
     (y,x) in R
, forAll (x,y) in R .
     (y,x) in S

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting R be relation((1,2)(1,3))
find S : Rtype
such that 
  forAll (x,y) in S . 
  (y,x) in R
  ,
  forAll (x,y) in R . 
  (y,x) in S


+++++++++++++++++++++++++++++++++++++ 
etest3.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..2)
letting R be domain relation of (D * D)
find i : D
such that
exists j : D . (i,j) in R

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..2)
letting R be domain relation of (D*D)
find i : D
such that 
  exists j : D . 
  (i,j) in R


etest4.essence
Expected "that" but got: thatÂ .Token Num: 43
----------------------------- 
+++++++++++++++++++++++++++++++++++++ 
etest5.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting T be domain tuple (D,D)
letting R be relation((1,2),(1,3))
find u : T
such that
  exists t in R . (t[1] = 1 /\ u[1] = t[1] /\ u[2] = t[2])

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting T be domain tuple(D,D)
letting R be relation((1,2)(1,3))
find u : T
such that 
  exists t in R . 
  t[1]  = 1 /\ u[1]  = t[1]  /\ u[2]  = t[2] 


+++++++++++++++++++++++++++++++++++++ 
etmp.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting R be relation((1,2),(1,3))
find i : D
such that
exists j : D . (i,j) in R
, forAll k : D . forAll j : D . ((k,j) in R -> (i,j) in R)

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting R be relation((1,2)(1,3))
find i : D
such that 
  exists j : D . 
  (i,j) in R
  ,
  forAll k : D . 
  forAll j : D . 
  (k,j) in R -> (i,j) in R


graph-shortcheaptour-2017070301.essence
Invalid statement:language Token Num: 0
----------------------------- 
+++++++++++++++++++++++++++++++++++++ 
r-sum-0.essence
+++++++++++++ Original ++++++++++++++++ 
find c : int(0..1)
such that
 true

* * * * * * Post Icing * * * * * * * 
find c : int(0..1)
such that 
  true


+++++++++++++++++++++++++++++++++++++ 
r-sum-1.essence
+++++++++++++ Original ++++++++++++++++ 
find c : int(0..1)
such that
 c = 0 + 1

* * * * * * Post Icing * * * * * * * 
find c : int(0..1)
such that 
  c = 0 + 1


r-sum-2.essence
Invalid statement:given Token Num: 0
----------------------------- 
r-sum.essence
Invalid statement:given Token Num: 0
----------------------------- 
+++++++++++++++++++++++++++++++++++++ 
2023-05-14 01:56:06.617183
 
+++++++++++++++++++++++++++++++++++++ 
egraph3col.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..10)
letting G be relation((1,2),(1,3),(2,3),(4,5),(5,6),(6,7),(7,8),(7,9),(8,9),(9,10),(3,4),(6,1),(2,6),(6,3),(10,8),(1,8))
find C : relation of (vertices)
such that
  forAll (u,v) in G .
     C(u) != C(v)

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..10)
letting G be relation((1,2)(1,3)(2,3)(4,5)(5,6)(6,7)(7,8)(7,9)(8,9)(9,10)(3,4)(6,1)(2,6)(6,3)(10,8)(1,8))
find C : relation of (vertices)
such that 
  forAll (u,v) in G . 
  C[u]  != C[v] 

+++++++++++++++++++++++++++++++++++++ 
egraph3col2.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..10)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3),(4,5),(5,6),(6,7),(7,8),(7,9),(8,9),(9,10),(3,4),(6,1),(2,6),(6,3),(10,8),(1,8))
find C : relation of (colours)
such that
  forAll (u,v) in G .
     C(u) != C(v)

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..10)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3)(4,5)(5,6)(6,7)(7,8)(7,9)(8,9)(9,10)(3,4)(6,1)(2,6)(6,3)(10,8)(1,8))
find C : relation of (colours)
such that 
  forAll (u,v) in G . 
  C[u]  != C[v] 

+++++++++++++++++++++++++++++++++++++ 
egraph3col3.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
find C : relation of (vertices * colours) $ a function, really
such that
  $ function
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
  $ total
, forAll u : vertices .
     exists c : colours . C(u,c)
  $ proper colouring
, forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
find C : relation of (vertices*colours)
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
  ,
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
  ,
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d

+++++++++++++++++++++++++++++++++++++ 
egraph3col4.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
find C : relation of (vertices * colours)
such that
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
such that
  forAll u : vertices .
     exists c : colours . C(u,c)
such that
  forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
find C : relation of (vertices*colours)
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
such that 
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
such that 
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d

+++++++++++++++++++++++++++++++++++++ 
emini-example1.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
letting map be domain relation of (vertices * colours)
find C : map
such that
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
such that
  forAll u : vertices .
     exists c : colours . C(u,c)
such that
  forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
letting map be domain relation of (vertices*colours)
find C : map
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
such that 
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
such that 
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d

+++++++++++++++++++++++++++++++++++++ 
emini-example2.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
letting map be domain relation of (vertices * colours)
letting T be domain tuple (vertices,colours)
find C : map
find t : T
such that
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
such that
  forAll u : vertices .
     exists c : colours . C(u,c)
such that
  forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))
such that
  t in C
such that
  t[1] = t[2]


* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
letting map be domain relation of (vertices*colours)
letting T be domain tuple(vertices,colours)
find C : map
find t : T
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
such that 
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
such that 
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d
such that 
  t in C
such that 
  t[1]  = t[2] 

+++++++++++++++++++++++++++++++++++++ 
etest.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting R be relation((1,2),(1,3))
find i : D
such that
  exists j : D . (i,j) in R
, forAll k : D . forAll j : D . ((k,j) in R -> (i,j) in R)

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting R be relation((1,2)(1,3))
find i : D
such that 
  exists j : D . 
  (i,j) in R
  ,
  forAll k : D . 
  forAll j : D . 
  (k,j) in R -> (i,j) in R

+++++++++++++++++++++++++++++++++++++ 
etest2.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting R be relation((1,2),(1,3))
find S : Rtype
such that
  forAll (x,y) in S .
     (y,x) in R
, forAll (x,y) in R .
     (y,x) in S

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting R be relation((1,2)(1,3))
find S : Rtype
such that 
  forAll (x,y) in S . 
  (y,x) in R
  ,
  forAll (x,y) in R . 
  (y,x) in S

+++++++++++++++++++++++++++++++++++++ 
etest3.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..2)
letting R be domain relation of (D * D)
find i : D
such that
exists j : D . (i,j) in R

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..2)
letting R be domain relation of (D*D)
find i : D
such that 
  exists j : D . 
  (i,j) in R

etest4.essence
Expected "that" but got: thatÂ .Token Num: 43
----------------------------- 
+++++++++++++++++++++++++++++++++++++ 
etest5.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting T be domain tuple (D,D)
letting R be relation((1,2),(1,3))
find u : T
such that
  exists t in R . (t[1] = 1 /\ u[1] = t[1] /\ u[2] = t[2])

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting T be domain tuple(D,D)
letting R be relation((1,2)(1,3))
find u : T
such that 
  exists t in R . 
  t[1]  = 1 /\ u[1]  = t[1]  /\ u[2]  = t[2] 

+++++++++++++++++++++++++++++++++++++ 
etmp.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting R be relation((1,2),(1,3))
find i : D
such that
exists j : D . (i,j) in R
, forAll k : D . forAll j : D . ((k,j) in R -> (i,j) in R)

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting R be relation((1,2)(1,3))
find i : D
such that 
  exists j : D . 
  (i,j) in R
  ,
  forAll k : D . 
  forAll j : D . 
  (k,j) in R -> (i,j) in R

graph-shortcheaptour-2017070301.essence
Invalid statement:language Token Num: 0
----------------------------- 
+++++++++++++++++++++++++++++++++++++ 
r-sum-0.essence
+++++++++++++ Original ++++++++++++++++ 
find c : int(0..1)
such that
 true

* * * * * * Post Icing * * * * * * * 
find c : int(0..1)
such that 
  true

+++++++++++++++++++++++++++++++++++++ 
r-sum-1.essence
+++++++++++++ Original ++++++++++++++++ 
find c : int(0..1)
such that
 c = 0 + 1

* * * * * * Post Icing * * * * * * * 
find c : int(0..1)
such that 
  c = 0 + 1

r-sum-2.essence
Invalid statement:given Token Num: 0
----------------------------- 
r-sum.essence
Invalid statement:given Token Num: 0
----------------------------- 
+++++++++++++++++++++++++++++++++++++ 
2023-05-14 01:56:50.427447
 
+++++++++++++++++++++++++++++++++++++ 
egraph3col.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..10)
letting G be relation((1,2),(1,3),(2,3),(4,5),(5,6),(6,7),(7,8),(7,9),(8,9),(9,10),(3,4),(6,1),(2,6),(6,3),(10,8),(1,8))
find C : relation of (vertices)
such that
  forAll (u,v) in G .
     C(u) != C(v)

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..10)
letting G be relation((1,2)(1,3)(2,3)(4,5)(5,6)(6,7)(7,8)(7,9)(8,9)(9,10)(3,4)(6,1)(2,6)(6,3)(10,8)(1,8))
find C : relation of (vertices)
such that 
  forAll (u,v) in G . 
  C[u]  != C[v] 

+++++++++++++++++++++++++++++++++++++ 
egraph3col2.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..10)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3),(4,5),(5,6),(6,7),(7,8),(7,9),(8,9),(9,10),(3,4),(6,1),(2,6),(6,3),(10,8),(1,8))
find C : relation of (colours)
such that
  forAll (u,v) in G .
     C(u) != C(v)

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..10)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3)(4,5)(5,6)(6,7)(7,8)(7,9)(8,9)(9,10)(3,4)(6,1)(2,6)(6,3)(10,8)(1,8))
find C : relation of (colours)
such that 
  forAll (u,v) in G . 
  C[u]  != C[v] 

+++++++++++++++++++++++++++++++++++++ 
egraph3col3.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
find C : relation of (vertices * colours) $ a function, really
such that
  $ function
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
  $ total
, forAll u : vertices .
     exists c : colours . C(u,c)
  $ proper colouring
, forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
find C : relation of (vertices*colours)
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
  ,
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
  ,
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d

+++++++++++++++++++++++++++++++++++++ 
egraph3col4.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
find C : relation of (vertices * colours)
such that
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
such that
  forAll u : vertices .
     exists c : colours . C(u,c)
such that
  forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
find C : relation of (vertices*colours)
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
such that 
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
such that 
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d

+++++++++++++++++++++++++++++++++++++ 
emini-example1.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
letting map be domain relation of (vertices * colours)
find C : map
such that
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
such that
  forAll u : vertices .
     exists c : colours . C(u,c)
such that
  forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
letting map be domain relation of (vertices*colours)
find C : map
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
such that 
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
such that 
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d

+++++++++++++++++++++++++++++++++++++ 
emini-example2.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
letting map be domain relation of (vertices * colours)
letting T be domain tuple (vertices,colours)
find C : map
find t : T
such that
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
such that
  forAll u : vertices .
     exists c : colours . C(u,c)
such that
  forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))
such that
  t in C
such that
  t[1] = t[2]


* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
letting map be domain relation of (vertices*colours)
letting T be domain tuple(vertices,colours)
find C : map
find t : T
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
such that 
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
such that 
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d
such that 
  t in C
such that 
  t[1]  = t[2] 

+++++++++++++++++++++++++++++++++++++ 
etest.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting R be relation((1,2),(1,3))
find i : D
such that
  exists j : D . (i,j) in R
, forAll k : D . forAll j : D . ((k,j) in R -> (i,j) in R)

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting R be relation((1,2)(1,3))
find i : D
such that 
  exists j : D . 
  (i,j) in R
  ,
  forAll k : D . 
  forAll j : D . 
  (k,j) in R -> (i,j) in R

+++++++++++++++++++++++++++++++++++++ 
etest2.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting R be relation((1,2),(1,3))
find S : Rtype
such that
  forAll (x,y) in S .
     (y,x) in R
, forAll (x,y) in R .
     (y,x) in S

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting R be relation((1,2)(1,3))
find S : Rtype
such that 
  forAll (x,y) in S . 
  (y,x) in R
  ,
  forAll (x,y) in R . 
  (y,x) in S

+++++++++++++++++++++++++++++++++++++ 
etest3.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..2)
letting R be domain relation of (D * D)
find i : D
such that
exists j : D . (i,j) in R

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..2)
letting R be domain relation of (D*D)
find i : D
such that 
  exists j : D . 
  (i,j) in R

etest4.essence
Expected "that" but got: thatÂ .Token Num: 43
----------------------------- 
+++++++++++++++++++++++++++++++++++++ 
etest5.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting T be domain tuple (D,D)
letting R be relation((1,2),(1,3))
find u : T
such that
  exists t in R . (t[1] = 1 /\ u[1] = t[1] /\ u[2] = t[2])

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting T be domain tuple(D,D)
letting R be relation((1,2)(1,3))
find u : T
such that 
  exists t in R . 
  t[1]  = 1 /\ u[1]  = t[1]  /\ u[2]  = t[2] 

+++++++++++++++++++++++++++++++++++++ 
etmp.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting R be relation((1,2),(1,3))
find i : D
such that
exists j : D . (i,j) in R
, forAll k : D . forAll j : D . ((k,j) in R -> (i,j) in R)

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting R be relation((1,2)(1,3))
find i : D
such that 
  exists j : D . 
  (i,j) in R
  ,
  forAll k : D . 
  forAll j : D . 
  (k,j) in R -> (i,j) in R

graph-shortcheaptour-2017070301.essence
Invalid statement:language Token Num: 0
----------------------------- 
+++++++++++++++++++++++++++++++++++++ 
r-sum-0.essence
+++++++++++++ Original ++++++++++++++++ 
find c : int(0..1)
such that
 true

* * * * * * Post Icing * * * * * * * 
find c : int(0..1)
such that 
  true

+++++++++++++++++++++++++++++++++++++ 
r-sum-1.essence
+++++++++++++ Original ++++++++++++++++ 
find c : int(0..1)
such that
 c = 0 + 1

* * * * * * Post Icing * * * * * * * 
find c : int(0..1)
such that 
  c = 0 + 1

r-sum-2.essence
Invalid statement:given Token Num: 0
----------------------------- 
r-sum.essence
Invalid statement:given Token Num: 0
----------------------------- 
+++++++++++++++++++++++++++++++++++++ 
2023-05-15 20:53:05.283805
 
+++++++++++++++++++++++++++++++++++++ 
egraph3col.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..10)
letting G be relation((1,2),(1,3),(2,3),(4,5),(5,6),(6,7),(7,8),(7,9),(8,9),(9,10),(3,4),(6,1),(2,6),(6,3),(10,8),(1,8))
find C : relation of (vertices)
such that
  forAll (u,v) in G .
     C(u) != C(v)

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..10)
letting G be relation((1,2)(1,3)(2,3)(4,5)(5,6)(6,7)(7,8)(7,9)(8,9)(9,10)(3,4)(6,1)(2,6)(6,3)(10,8)(1,8))
find C : relation of (vertices)
such that 
  forAll (u,v) in G . 
  C[u]  != C[v] 

+++++++++++++++++++++++++++++++++++++ 
egraph3col2.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..10)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3),(4,5),(5,6),(6,7),(7,8),(7,9),(8,9),(9,10),(3,4),(6,1),(2,6),(6,3),(10,8),(1,8))
find C : relation of (colours)
such that
  forAll (u,v) in G .
     C(u) != C(v)

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..10)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3)(4,5)(5,6)(6,7)(7,8)(7,9)(8,9)(9,10)(3,4)(6,1)(2,6)(6,3)(10,8)(1,8))
find C : relation of (colours)
such that 
  forAll (u,v) in G . 
  C[u]  != C[v] 

+++++++++++++++++++++++++++++++++++++ 
egraph3col3.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
find C : relation of (vertices * colours) $ a function, really
such that
  $ function
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
  $ total
, forAll u : vertices .
     exists c : colours . C(u,c)
  $ proper colouring
, forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
find C : relation of (vertices*colours)
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
  ,
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
  ,
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d

+++++++++++++++++++++++++++++++++++++ 
egraph3col4.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
find C : relation of (vertices * colours)
such that
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
such that
  forAll u : vertices .
     exists c : colours . C(u,c)
such that
  forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
find C : relation of (vertices*colours)
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
such that 
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
such that 
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d

+++++++++++++++++++++++++++++++++++++ 
emini-example1.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
letting map be domain relation of (vertices * colours)
find C : map
such that
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
such that
  forAll u : vertices .
     exists c : colours . C(u,c)
such that
  forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
letting map be domain relation of (vertices*colours)
find C : map
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
such that 
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
such that 
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d

+++++++++++++++++++++++++++++++++++++ 
emini-example2.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
letting map be domain relation of (vertices * colours)
letting T be domain tuple (vertices,colours)
find C : map
find t : T
such that
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
such that
  forAll u : vertices .
     exists c : colours . C(u,c)
such that
  forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))
such that
  t in C
such that
  t[1] = t[2]


* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
letting map be domain relation of (vertices*colours)
letting T be domain tuple(vertices,colours)
find C : map
find t : T
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
such that 
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
such that 
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d
such that 
  t in C
such that 
  t[1]  = t[2] 

+++++++++++++++++++++++++++++++++++++ 
etest.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting R be relation((1,2),(1,3))
find i : D
such that
  exists j : D . (i,j) in R
, forAll k : D . forAll j : D . ((k,j) in R -> (i,j) in R)

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting R be relation((1,2)(1,3))
find i : D
such that 
  exists j : D . 
  (i,j) in R
  ,
  forAll k : D . 
  forAll j : D . 
  (k,j) in R -> (i,j) in R

+++++++++++++++++++++++++++++++++++++ 
etest2.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting R be relation((1,2),(1,3))
find S : Rtype
such that
  forAll (x,y) in S .
     (y,x) in R
, forAll (x,y) in R .
     (y,x) in S

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting R be relation((1,2)(1,3))
find S : Rtype
such that 
  forAll (x,y) in S . 
  (y,x) in R
  ,
  forAll (x,y) in R . 
  (y,x) in S

+++++++++++++++++++++++++++++++++++++ 
etest3.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..2)
letting R be domain relation of (D * D)
find i : D
such that
exists j : D . (i,j) in R

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..2)
letting R be domain relation of (D*D)
find i : D
such that 
  exists j : D . 
  (i,j) in R

etest4.essence
Expected "that" but got: thatÂ .Token Num: 43
----------------------------- 
+++++++++++++++++++++++++++++++++++++ 
etest5.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting T be domain tuple (D,D)
letting R be relation((1,2),(1,3))
find u : T
such that
  exists t in R . (t[1] = 1 /\ u[1] = t[1] /\ u[2] = t[2])

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting T be domain tuple(D,D)
letting R be relation((1,2)(1,3))
find u : T
such that 
  exists t in R . 
  t[1]  = 1 /\ u[1]  = t[1]  /\ u[2]  = t[2] 

+++++++++++++++++++++++++++++++++++++ 
etmp.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting R be relation((1,2),(1,3))
find i : D
such that
exists j : D . (i,j) in R
, forAll k : D . forAll j : D . ((k,j) in R -> (i,j) in R)

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting R be relation((1,2)(1,3))
find i : D
such that 
  exists j : D . 
  (i,j) in R
  ,
  forAll k : D . 
  forAll j : D . 
  (k,j) in R -> (i,j) in R

graph-shortcheaptour-2017070301.essence
Invalid statement:language Token Num: 0
----------------------------- 
+++++++++++++++++++++++++++++++++++++ 
r-sum-0.essence
+++++++++++++ Original ++++++++++++++++ 
find c : int(0..1)
such that
 true

* * * * * * Post Icing * * * * * * * 
find c : int(0..1)
such that 
  true

+++++++++++++++++++++++++++++++++++++ 
r-sum-1.essence
+++++++++++++ Original ++++++++++++++++ 
find c : int(0..1)
such that
 c = 0 + 1

* * * * * * Post Icing * * * * * * * 
find c : int(0..1)
such that 
  c = 0 + 1

r-sum-2.essence
Invalid statement:given Token Num: 0
----------------------------- 
r-sum.essence
Invalid statement:given Token Num: 0
----------------------------- 
+++++++++++++++++++++++++++++++++++++ 
2023-08-09 19:01:57.791757
 
+++++++++++++++++++++++++++++++++++++ 
emini-example1.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
letting map be domain relation of (vertices * colours)
find C : map
such that
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
such that
  forAll u : vertices .
     exists c : colours . C(u,c)
such that
  forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
letting map be domain relation of (vertices*colours)
find C : map
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
such that 
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
such that 
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d

+++++++++++++++++++++++++++++++++++++ 
etest3.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..2)
letting R be domain relation of (D * D)
find i : D
such that
exists j : D . (i,j) in R

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..2)
letting R be domain relation of (D*D)
find i : D
such that 
  exists j : D . 
  (i,j) in R

+++++++++++++++++++++++++++++++++++++ 
etest4.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting R be relation((1,2),(1,3))
find i : D
such thatÂ Â exists j : D . (i,j) in R
, forAll k : D . forAll j : D . ((k,j) in R -> (i,j) in R)

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting R be relation((1,2)(1,3))
find i : D
such that 
  exists j : D . 
  (i,j) in R
  ,
  forAll k : D . 
  forAll j : D . 
  (k,j) in R -> (i,j) in R

+++++++++++++++++++++++++++++++++++++ 
r-sum-1.essence
+++++++++++++ Original ++++++++++++++++ 
find c : int(0..1)
such that
 c = 0 + 1

* * * * * * Post Icing * * * * * * * 
find c : int(0..1)
such that 
  c = 0 + 1

+++++++++++++++++++++++++++++++++++++ 
etmp.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting R be relation((1,2),(1,3))
find i : D
such that
exists j : D . (i,j) in R
, forAll k : D . forAll j : D . ((k,j) in R -> (i,j) in R)

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting R be relation((1,2)(1,3))
find i : D
such that 
  exists j : D . 
  (i,j) in R
  ,
  forAll k : D . 
  forAll j : D . 
  (k,j) in R -> (i,j) in R

+++++++++++++++++++++++++++++++++++++ 
egraph3col2.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..10)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3),(4,5),(5,6),(6,7),(7,8),(7,9),(8,9),(9,10),(3,4),(6,1),(2,6),(6,3),(10,8),(1,8))
find C : relation of (colours)
such that
  forAll (u,v) in G .
     C(u) != C(v)

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..10)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3)(4,5)(5,6)(6,7)(7,8)(7,9)(8,9)(9,10)(3,4)(6,1)(2,6)(6,3)(10,8)(1,8))
find C : relation of (colours)
such that 
  forAll (u,v) in G . 
  C[u]  != C[v] 

+++++++++++++++++++++++++++++++++++++ 
treeGen.essence
+++++++++++++ Original ++++++++++++++++ 
letting n be 12
letting vertices be domain int(0..n)
find edges : relation (size n) of (vertices * vertices)
such that
    forAll edge,edge2 in edges .
        edge[2] > edge[1] /\
        ((edge != edge2) -> (edge[2] != edge2[2]))
* * * * * * Post Icing * * * * * * * 
letting n be 12
letting vertices be domain int(0..n)
find edges : relation (size n)  of (vertices*vertices)
such that 
  forAll edge,edge2 in edges . 
  edge[2]  > edge[1]  /\ ( edge != edge2 -> edge[2]  != edge2[2]  )

+++++++++++++++++++++++++++++++++++++ 
egraph3col4.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
find C : relation of (vertices * colours)
such that
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
such that
  forAll u : vertices .
     exists c : colours . C(u,c)
such that
  forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
find C : relation of (vertices*colours)
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
such that 
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
such that 
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d

r-sum.essence
can only concatenate str (not "NoneType") to str
----------------------------- 
+++++++++++++++++++++++++++++++++++++ 
emini-example2.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
letting map be domain relation of (vertices * colours)
letting T be domain tuple (vertices,colours)
find C : map
find t : T
such that
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
such that
  forAll u : vertices .
     exists c : colours . C(u,c)
such that
  forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))
such that
  t in C
such that
  t[1] = t[2]


* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
letting map be domain relation of (vertices*colours)
letting T be domain tuple(vertices,colours)
find C : map
find t : T
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
such that 
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
such that 
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d
such that 
  t in C
such that 
  t[1]  = t[2] 

+++++++++++++++++++++++++++++++++++++ 
etest2.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting R be relation((1,2),(1,3))
find S : Rtype
such that
  forAll (x,y) in S .
     (y,x) in R
, forAll (x,y) in R .
     (y,x) in S

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting R be relation((1,2)(1,3))
find S : Rtype
such that 
  forAll (x,y) in S . 
  (y,x) in R
  ,
  forAll (x,y) in R . 
  (y,x) in S

graph-shortcheaptour-2017070301.essence
Invalid statement:language Token Num: 0
----------------------------- 
gc-simple.essence
Invalid statement:of Token Num: 18
----------------------------- 
+++++++++++++++++++++++++++++++++++++ 
egraph3col3.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
find C : relation of (vertices * colours) $ a function, really
such that
  $ function
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
  $ total
, forAll u : vertices .
     exists c : colours . C(u,c)
  $ proper colouring
, forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
find C : relation of (vertices*colours)
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
  ,
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
  ,
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d

+++++++++++++++++++++++++++++++++++++ 
testExpression.essence
+++++++++++++ Original ++++++++++++++++ 
letting a be 1
letting b be 9
letting c be 11
letting d be 100
find Y : int(0..100)
such that 
  Y < c /\ Y < d /\ a < Y /\ b < Y

* * * * * * Post Icing * * * * * * * 
letting a be 1
letting b be 9
letting c be 11
letting d be 100
find Y : int(0..100)
such that 
  Y < c /\ Y < d /\ a < Y /\ b < Y

r-sum-2.essence
can only concatenate str (not "NoneType") to str
----------------------------- 
+++++++++++++++++++++++++++++++++++++ 
egraph3col.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..10)
letting G be relation((1,2),(1,3),(2,3),(4,5),(5,6),(6,7),(7,8),(7,9),(8,9),(9,10),(3,4),(6,1),(2,6),(6,3),(10,8),(1,8))
find C : relation of (vertices)
such that
  forAll (u,v) in G .
     C(u) != C(v)

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..10)
letting G be relation((1,2)(1,3)(2,3)(4,5)(5,6)(6,7)(7,8)(7,9)(8,9)(9,10)(3,4)(6,1)(2,6)(6,3)(10,8)(1,8))
find C : relation of (vertices)
such that 
  forAll (u,v) in G . 
  C[u]  != C[v] 

+++++++++++++++++++++++++++++++++++++ 
testExpression2.essence
+++++++++++++ Original ++++++++++++++++ 
find i : int(0..100)
such that 
  i = 2 * 1 + 3 * 4

* * * * * * Post Icing * * * * * * * 
find i : int(0..100)
such that 
  i = 2 * 1 + 3 * 4

+++++++++++++++++++++++++++++++++++++ 
etest5.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting T be domain tuple (D,D)
letting R be relation((1,2),(1,3))
find u : T
such that
  exists t in R . (t[1] = 1 /\ u[1] = t[1] /\ u[2] = t[2])

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting T be domain tuple(D,D)
letting R be relation((1,2)(1,3))
find u : T
such that 
  exists t in R . 
  t[1]  = 1 /\ u[1]  = t[1]  /\ u[2]  = t[2] 

+++++++++++++++++++++++++++++++++++++ 
r-sum-0.essence
+++++++++++++ Original ++++++++++++++++ 
find c : int(0..1)
such that
 true

* * * * * * Post Icing * * * * * * * 
find c : int(0..1)
such that 
  true

+++++++++++++++++++++++++++++++++++++ 
etest.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting R be relation((1,2),(1,3))
find i : D
such that
  exists j : D . (i,j) in R
, forAll k : D . forAll j : D . ((k,j) in R -> (i,j) in R)

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting R be relation((1,2)(1,3))
find i : D
such that 
  exists j : D . 
  (i,j) in R
  ,
  forAll k : D . 
  forAll j : D . 
  (k,j) in R -> (i,j) in R

+++++++++++++++++++++++++++++++++++++ 
2023-10-10 18:26:10.825185
 
+++++++++++++++++++++++++++++++++++++ 
emini-example1.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
letting map be domain relation of (vertices * colours)
find C : map
such that
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
such that
  forAll u : vertices .
     exists c : colours . C(u,c)
such that
  forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
letting map be domain relation of (vertices*colours)
find C : map
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
such that 
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
such that 
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d

+++++++++++++++++++++++++++++++++++++ 
etest3.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..2)
letting R be domain relation of (D * D)
find i : D
such that
exists j : D . (i,j) in R

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..2)
letting R be domain relation of (D*D)
find i : D
such that 
  exists j : D . 
  (i,j) in R

+++++++++++++++++++++++++++++++++++++ 
etest4.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting R be relation((1,2),(1,3))
find i : D
such thatÂ Â exists j : D . (i,j) in R
, forAll k : D . forAll j : D . ((k,j) in R -> (i,j) in R)

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting R be relation((1,2)(1,3))
find i : D
such that 
  exists j : D . 
  (i,j) in R
  ,
  forAll k : D . 
  forAll j : D . 
  (k,j) in R -> (i,j) in R

+++++++++++++++++++++++++++++++++++++ 
deMorgTestOutput.essence
+++++++++++++ Original ++++++++++++++++ 
find a : bool
find b : bool
find c : bool
such that 
  a = ! ( b \/ c )

* * * * * * Post Icing * * * * * * * 
find a : bool
find b : bool
find c : bool
such that 
  a = ! ( b \/ c )

+++++++++++++++++++++++++++++++++++++ 
r-sum-1.essence
+++++++++++++ Original ++++++++++++++++ 
find c : int(0..1)
such that
 c = 0 + 1

* * * * * * Post Icing * * * * * * * 
find c : int(0..1)
such that 
  c = 0 + 1

+++++++++++++++++++++++++++++++++++++ 
etmp.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting R be relation((1,2),(1,3))
find i : D
such that
exists j : D . (i,j) in R
, forAll k : D . forAll j : D . ((k,j) in R -> (i,j) in R)

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting R be relation((1,2)(1,3))
find i : D
such that 
  exists j : D . 
  (i,j) in R
  ,
  forAll k : D . 
  forAll j : D . 
  (k,j) in R -> (i,j) in R

+++++++++++++++++++++++++++++++++++++ 
egraph3col2.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..10)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3),(4,5),(5,6),(6,7),(7,8),(7,9),(8,9),(9,10),(3,4),(6,1),(2,6),(6,3),(10,8),(1,8))
find C : relation of (colours)
such that
  forAll (u,v) in G .
     C(u) != C(v)

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..10)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3)(4,5)(5,6)(6,7)(7,8)(7,9)(8,9)(9,10)(3,4)(6,1)(2,6)(6,3)(10,8)(1,8))
find C : relation of (colours)
such that 
  forAll (u,v) in G . 
  C[u]  != C[v] 

+++++++++++++++++++++++++++++++++++++ 
treeGen.essence
+++++++++++++ Original ++++++++++++++++ 
letting n be 12
letting vertices be domain int(0..n)
find edges : relation (size n) of (vertices * vertices)
such that
    forAll edge,edge2 in edges .
        edge[2] > edge[1] /\
        ((edge != edge2) -> (edge[2] != edge2[2]))
* * * * * * Post Icing * * * * * * * 
letting n be 12
letting vertices be domain int(0..n)
find edges : relation (size n)  of (vertices*vertices)
such that 
  forAll edge,edge2 in edges . 
  edge[2]  > edge[1]  /\ ( edge != edge2 -> edge[2]  != edge2[2]  )

+++++++++++++++++++++++++++++++++++++ 
egraph3col4.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
find C : relation of (vertices * colours)
such that
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
such that
  forAll u : vertices .
     exists c : colours . C(u,c)
such that
  forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
find C : relation of (vertices*colours)
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
such that 
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
such that 
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d

+++++++++++++++++++++++++++++++++++++ 
r-sum.essence
+++++++++++++ Original ++++++++++++++++ 
given a : int
find c : int(a..a+1)
such that
  c = 1 + a

* * * * * * Post Icing * * * * * * * 
given a : int(c..a + 1)
such that 
  c = 1 + a

+++++++++++++++++++++++++++++++++++++ 
emini-example2.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
letting map be domain relation of (vertices * colours)
letting T be domain tuple (vertices,colours)
find C : map
find t : T
such that
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
such that
  forAll u : vertices .
     exists c : colours . C(u,c)
such that
  forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))
such that
  t in C
such that
  t[1] = t[2]


* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
letting map be domain relation of (vertices*colours)
letting T be domain tuple(vertices,colours)
find C : map
find t : T
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
such that 
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
such that 
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d
such that 
  t in C
such that 
  t[1]  = t[2] 

+++++++++++++++++++++++++++++++++++++ 
etest2.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting R be relation((1,2),(1,3))
find S : Rtype
such that
  forAll (x,y) in S .
     (y,x) in R
, forAll (x,y) in R .
     (y,x) in S

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting R be relation((1,2)(1,3))
find S : Rtype
such that 
  forAll (x,y) in S . 
  (y,x) in R
  ,
  forAll (x,y) in R . 
  (y,x) in S

graph-shortcheaptour-2017070301.essence
Invalid statement:language Token Num: 0
----------------------------- 
gc-simple.essence
Invalid statement:of Token Num: 18
----------------------------- 
+++++++++++++++++++++++++++++++++++++ 
egraph3col3.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2),(1,3),(2,3))
find C : relation of (vertices * colours) $ a function, really
such that
  $ function
  forAll (u,c) in C .
     forAll (v,d) in C .
        ((u = v) -> (c = d))
  $ total
, forAll u : vertices .
     exists c : colours . C(u,c)
  $ proper colouring
, forAll (u,v) in G .
     forAll c,d : colours . (C(u,c) /\ C(v,d) -> (c != d))

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..3)
letting colours be domain int(1..3)
letting G be relation((1,2)(1,3)(2,3))
find C : relation of (vertices*colours)
such that 
  forAll (u,c) in C . 
  forAll (v,d) in C . 
  u = v -> c = d
  ,
  forAll u : vertices . 
  exists c : colours . 
  C(u,c)
  ,
  forAll (u,v) in G . 
  forAll c,d : colours . 
  C(u,c) /\ C(v,d) -> c != d

+++++++++++++++++++++++++++++++++++++ 
testExpression.essence
+++++++++++++ Original ++++++++++++++++ 
letting a be 1
letting b be 9
letting c be 11
letting d be 100
find Y : int(0..100)
such that 
  Y < c /\ Y < d /\ Y > a /\ b < Y

* * * * * * Post Icing * * * * * * * 
letting a be 1
letting b be 9
letting c be 11
letting d be 100
find Y : int(0..100)
such that 
  Y < c /\ Y < d /\ Y > a /\ b < Y

+++++++++++++++++++++++++++++++++++++ 
r-sum-2.essence
+++++++++++++ Original ++++++++++++++++ 
given a : int
find c : int(a..a+2)
such that
  c = 2 + a

* * * * * * Post Icing * * * * * * * 
given a : int(c..a + 2)
such that 
  c = 2 + a

+++++++++++++++++++++++++++++++++++++ 
egraph3col.essence
+++++++++++++ Original ++++++++++++++++ 
letting vertices be domain int(1..10)
letting G be relation((1,2),(1,3),(2,3),(4,5),(5,6),(6,7),(7,8),(7,9),(8,9),(9,10),(3,4),(6,1),(2,6),(6,3),(10,8),(1,8))
find C : relation of (vertices)
such that
  forAll (u,v) in G .
     C(u) != C(v)

* * * * * * Post Icing * * * * * * * 
letting vertices be domain int(1..10)
letting G be relation((1,2)(1,3)(2,3)(4,5)(5,6)(6,7)(7,8)(7,9)(8,9)(9,10)(3,4)(6,1)(2,6)(6,3)(10,8)(1,8))
find C : relation of (vertices)
such that 
  forAll (u,v) in G . 
  C[u]  != C[v] 

+++++++++++++++++++++++++++++++++++++ 
testExpression2.essence
+++++++++++++ Original ++++++++++++++++ 
find i : int(0..100)
such that 
  i = 2 * 1 + 3 * 4

* * * * * * Post Icing * * * * * * * 
find i : int(0..100)
such that 
  i = 2 * 1 + 3 * 4

+++++++++++++++++++++++++++++++++++++ 
etest5.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting T be domain tuple (D,D)
letting R be relation((1,2),(1,3))
find u : T
such that
  exists t in R . (t[1] = 1 /\ u[1] = t[1] /\ u[2] = t[2])

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting T be domain tuple(D,D)
letting R be relation((1,2)(1,3))
find u : T
such that 
  exists t in R . 
  t[1]  = 1 /\ u[1]  = t[1]  /\ u[2]  = t[2] 

+++++++++++++++++++++++++++++++++++++ 
deMorgTest.essence
+++++++++++++ Original ++++++++++++++++ 

find a : bool
find b : bool
find c : bool
such that
    a = !(b /\ c)
* * * * * * Post Icing * * * * * * * 
find a : bool
find b : bool
find c : bool
such that 
  a = ! ( b /\ c )

+++++++++++++++++++++++++++++++++++++ 
r-sum-0.essence
+++++++++++++ Original ++++++++++++++++ 
find c : int(0..1)
such that
 true

* * * * * * Post Icing * * * * * * * 
find c : int(0..1)
such that 
  true

+++++++++++++++++++++++++++++++++++++ 
etest.essence
+++++++++++++ Original ++++++++++++++++ 
letting D be domain int(1..3)
letting Rtype be domain relation of (D * D)
letting R be relation((1,2),(1,3))
find i : D
such that
  exists j : D . (i,j) in R
, forAll k : D . forAll j : D . ((k,j) in R -> (i,j) in R)

* * * * * * Post Icing * * * * * * * 
letting D be domain int(1..3)
letting Rtype be domain relation of (D*D)
letting R be relation((1,2)(1,3))
find i : D
such that 
  exists j : D . 
  (i,j) in R
  ,
  forAll k : D . 
  forAll j : D . 
  (k,j) in R -> (i,j) in R

