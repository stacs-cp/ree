Main = fromCountingRelToFunctionsAndSets;expand!;delete!;addSet;addFunction;addConstraint


fromCountingRelToFunctionsAndSets(specName,decisionVariableName:string;findPos,n:int)
[
     // DecisionVariableType becomes function

    (n0, specName)
    (n1, "find")
    (n2, decisionVariableName)
    (n3, "relation")

    (n4, ".")
    (n5, "forAll")
    (n6, "in")
    (n7, "edges")
    (n8, ".")

    (n9, "such that")
    (n10, ".")
    (n11, "=")
|
    (e1, n0, n1, findPos)
    (e2, n1, n2, 1)
    (e3, n2, n3, 1)

    (e4, n4, n5, 1)
    (e5, n5, n6, 2)
    (e6, n6, n7, 1)

    (e8, n4,n8, 2)

    (e9, n9, n10, n)
    (e10, n10, n11, 2)


]
=>
[
    (n0, specName)
    (n1, "find")
    (n2, decisionVariableName)
    (n3, "relation"# red)

    (n4, ".")
    (n5, "forAll")
    (n6, "in")
    (n7, "edges")
    (n8, "."# red)

    (n9, "such that")
    (n10, "."# red)
    (n11, "=")
|
    (e1, n0, n1, findPos)
    (e2, n1, n2, 1)
    (e3, n2, n3, 1)

    (e4, n4, n5, 1)
    (e5, n5, n6, 2)
    (e6, n6, n7, 1)

    (e8, n4,n8, 2)

    (e9, n9, n10, n)
    (e10, n10, n11, 2)
]
interface =
{
  n0,n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11
}

expand(x,y:string; n:int) 
[ 
(n0, x # red) 
(n1, y) 
| 
(e1, n0, n1, n) 
] 
=> 
[ 
(n0, x # red) 
(n1, y # red) 
| 
(e1, n0, n1, n) 
]
interface = {n0, n1}

delete(x,y:string; n:int)
[ 
(n0, x # red) 
(n1, y # red) 
| 
(e1, n0, n1, n) 
] 
=> 
[ 
(n0, x # red) 
| 
]
interface = {n0}

addSet(specName:string)
[ 
(n0, specName) 
(n1, "root") 
| 
(e1, n0, n1, 0) 
] 
=> 
[
(n0,specName)
(n1,"root")
(n111,"letting")
(n10,"DomainNameLettingStatement")
(n2,"coloursSet")
(n11,"Node")
(n3,"set")
(n12,"SetDomain")
(n4,"size")
(n13,"Attribute")
(n5,"coloursPerNode")
(n14,"ReferenceToParameter")
(n6,"colours")
(n15,"ReferenceToNamedDomain")

| 
(e0,n0,n1,0)
(e1,n0,n111,1)
(e111,n111,n2,1)
(e2,n2,n3,1)
(e3,n3,n4,1)
(e4,n4,n5,1)
(e5,n3,n6,2)


(e17,n1,n10, 0)
(e18,n2,n11, 0)
(e19,n3,n12, 0)
(e20,n4,n13, 0)
(e21,n5,n14, 0)
(e22,n6,n15, 0)

]
interface = {n0,n1}

addFunction()
[
     // DecisionVariableType becomes function

    (n0, "relation"# red)
|

]
=>
[
    (n0, "function")
    (n1, "FunctionDomain")
    (n2, "total")
    (n3, "vertices")
    (n4, "coloursSet")

    (n12, "Attribute")
    (n13, "ReferenceToNamedDomain")
    (n14, "ReferenceToNamedDomain")

|
    (e0, n0, n1, 0)
    (e2, n0, n2, 1)
    (e3, n0, n3, 2)
    (e4, n0, n4, 3)
    
    (e12, n2, n12, 0)
    (e13, n3, n13, 0)
    (e14, n4, n14, 0)
]
interface =
{
  n0
}

addConstraint()
[
     // DecisionVariableType becomes function
    (n0, ".")
    (n1, "."# red)
|
    (e1, n0, n1, 2) 
]
=>
[
(n0,".")
(n9,"=")
(n27,"BinaryExpression")
(n10,"intersect")
(n28,"BinaryExpression")
(n11,"c")
(n29,"MemberExpression")
(n12,"tuple")
(n30,"TupleConstant")
(n13,"v")
(n31,"Literal")
(n14,"c")
(n32,"MemberExpression")
(n15,"tuple")
(n33,"TupleConstant")
(n16,"u")
(n34,"Literal")
(n17,"set")
(n35,"SetConstant")

|
(e0, n0, n9, 2)
(e1, n9, n27, 0)
(e2, n9, n10, 1)
(e3, n9, n17, 2)
(e4, n10, n28, 0)
(e5, n10, n11, 1)
(e6, n10, n14, 2)
(e7, n11, n29, 0)
(e8, n11, n12, 1)
(e9, n12, n30, 0)
(e10, n12, n13, 1)
(e11, n13, n31, 0)
(e12, n14, n32,0)
(e13, n14, n15, 1)
(e14, n15, n33, 0)
(e15, n15, n16, 1)
(e16, n16, n34, 0)
(e17, n17, n35, 0)

]
interface =
{
  n0
}

