Main = fromCountingRelToFunctionsAndSets


fromCountingRelToFunctionsAndSets(decisionVariableRef,graphReference,specName,decisionVariableName,edgesParameter,referenceToVertices:string)
[
    // nodes that will be turned into function, Root, FindStatement and DecisionVariable preserved
    // DecisionVariableType becomes function
    // we need to check that there is a quantifier over the decision variable
    (n0, specName)
    (n1, "find~FindStatement")
    (n2, decisionVariableName)
    (n3, "relation~RelationDomain")

    (n4, "given~GivenStatement")
    (n5, edgesParameter)
    (n6, "relation~RelationDomain")
    (n7, referenceToVertices)
    (n8, referenceToVertices)

    // check quantifications over graphs edges this is preserved up to the . concatenation 
    (n12, ".~BinaryExpression")

    (n37,"size~Attribute")
    (n38,"*~BinaryExpression")
    (n39,"n~ReferenceToParameter")
    (n40,"coloursPerNode~ReferenceToParameter")

    (n43,"such that~SuchThatStatement")
    (n52,".~BinaryExpression")
    (n53,"forAll~QuantificationExpression")
    (n54,"colourAssignment~LocalVariable")
    (n55,"in~Preposition")
    (n56,"c~ReferenceToDecisionVariable")

    (n57,"IMPLY~BinaryExpression")
    (n58,"=~BinaryExpression")
    (n59,"colourAssignment~MemberExpression")
    (n60,"1~Integer")
    (n61,"u~Literal")
    (n62,"NOT~UnaryExpression")
    (n63,"in~BinaryExpression")
    (n64,"tuple~TupleConstant")
    (n65,"v~Literal")
    (n66,"colourAssignment~MemberExpression")
    (n67,"2~Integer")
    (n68,"c~ReferenceToDecisionVariable")

    (n69,".~BinaryExpression")
    (n70,"forAll~QuantificationExpression")
    (n71,"u~LocalVariable")
    (n72,":~Preposition")
    (n73,"vertices~ReferenceToNamedDomain")
    (n74,"=~BinaryExpression")
    (n75,"coloursPerNode~ReferenceToParameter")
    (n76,".~BinaryExpression")
    (n77,"sum~QuantificationExpression")
    (n78,"colourAssignment~LocalVariable")
    (n79,"in~Preposition")
    (n80,"c~ReferenceToDecisionVariable")
    (n81,"toInt~UnaryExpression")
    (n82,"=~BinaryExpression")
    (n83,"colourAssignment~MemberExpression")
    (n84,"1~Integer")
    (n85,"u~Literal")

    |

    // decision variable edges
    (e1, n0, n1, 7)
    (e2, n1, n2, 1)
    (e3, n2, n3, 1)
    // parameter edges
    (e4, n4, n5, 1)
    (e5, n5, n6, 1)
    (e6, n6, n7, 2)
    (e7, n6, n8, 3)

    // quantification over reference to graph edges

    (e100, n0, n43, 8)
    (e101, n0, n4, 3)
    (e102, n43, n12, 2)

    (e36,n3,n37,1)
    (e37,n37,n38,1)
    (e38,n38,n39,1)
    (e39,n38,n40,2)

    (e51,n12,n52,2)
    (e52,n52,n53,1)
    (e53,n53,n54,1)
    (e54,n53,n55,2)
    (e55,n55,n56,1)
    (e56,n52,n57,2)
    (e57,n57,n58,1)
    (e58,n58,n59,1)
    (e59,n59,n60,1)
    (e60,n58,n61,2)
    (e61,n57,n62,2)
    (e62,n62,n63,1)
    (e63,n63,n64,1)
    (e64,n64,n65,1)
    (e65,n64,n66,2)
    (e66,n66,n67,1)
    (e67,n63,n68,2)
    (e68,n43,n69,3)
    (e69,n69,n70,1)
    (e70,n70,n71,1)
    (e71,n70,n72,2)
    (e72,n72,n73,1)
    (e73,n69,n74,2)
    (e74,n74,n75,1)
    (e75,n74,n76,2)
    (e76,n76,n77,1)
    (e77,n77,n78,1)
    (e78,n77,n79,2)
    (e79,n79,n80,1)
    (e80,n76,n81,2)
    (e81,n81,n82,1)
    (e82,n82,n83,1)
    (e83,n83,n84,1)
    (e84,n82,n85,2)
]



=>


[
    (n0, specName)
    (n1, "find~FindStatement")
    (n2, decisionVariableName)

    (n4, "given~GivenStatement")
    (n5, edgesParameter)
    (n6, "relation~RelationDomain")
    (n7, referenceToVertices)
    (n8, referenceToVertices)
    // Create Auxiliary variable coloursSet
    (n22, "letting~DomainNameLettingStatement")
    (n23, "coloursSet~Node")
    (n24, "set~SetDomain")
    (n25, "size~Attribute")
    (n26, "colours~ReferenceToNamedDomain")
    (n27, "coloursPerNode~ReferenceToParameter")

    // Function that replaces Relation
    (n3, "function~FunctionDomain")

     // Preserve quantification over graph
    (n12, ".~BinaryExpression")


     // Sets Intersect that replaces the 2 constraint
    (n28, "=~BinaryExpression")
    (n29, "intersect~BinaryExpression")
    (n30, "set~SetConstant")
    (n31, "c~MemberExpression")
    (n32, "tuple~TupleConstant")
    (n33, "v~Literal")

    (n34, "c~MemberExpression")
    (n35,"tuple~TupleConstant")
    (n36, "u~Literal")

    (n43,"such that~SuchThatStatement")
    (n52,".~BinaryExpression")
    (n53,"forAll~QuantificationExpression")
    (n54,"colourAssignment~LocalVariable")
    (n55,"in~Preposition")
    (n56,"c~ReferenceToDecisionVariable")

    |

     //preserved FindStatement edges
    (e1, n0, n1, 2)
    (e2, n1, n2, 1)
    (e3, n2, n3, 1)
    // parameter edges
    (e4, n4, n5, 1)
    (e5, n5, n6, 1)
    (e6, n6, n7, 2)
    (e7, n6, n8, 3)

    // AUX set edges
    (e20, n0, n22, 0)
    (e21, n22, n23, 1)
    (e22, n23, n24, 1)
    (e23, n24, n25, 1)
    (e24, n24, n26, 2)
    (e25, n25, n27, 1)

    // preserved quantification over graph
    // quantification over reference to graph edges
    (e51,n12,n52,2)
    (e52,n52,n53,1)
    (e53,n53,n54,1)
    (e54,n53,n55,2)
    (e55,n55,n56,1)

    // New constraint edges 

    (e10, n12,n28, 2)
    (e11, n28, n29, 1)
    (e12, n28, n30, 2)
    (e13, n29, n31, 1)
    (e14, n31, n32, 1)
    (e15, n32, n33, 1)

    (e16, n29, n34, 2)
    (e17, n34, n35, 1)
    (e18, n35, n36, 1)


    (e68, n43, n12, 2)
    (e100, n0, n43, 8)
    (e101, n0, n4, 3)
]
interface =
{
  n0,n1, n2, n4, n5,n6,n7,n8, n12, n43,n52,n53,n54,n55,n56
}